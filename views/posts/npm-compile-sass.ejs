<div class="text-left blog-post-text">
  <p class="mb-4">
    There are many different ways to compile
    <a
      href="https://stackoverflow.com/questions/5654447/whats-the-difference-between-scss-and-sass"
      >SCSS</a
    >, one of the
    <a href="https://sass-lang.com/documentation/syntax"
      >two syntaxes supported by SASS</a
    >. In this post we will explore the utilization of the
    <a href="https://www.npmjs.com/package/node-sass?activeTab=readme"
      >node-sass</a
    >
    npm package. We'll also look at how we can use the
    <a href="https://www.npmjs.com/package/clean-css">clean-css</a> npm package
    to minify and optimize the generated output after compiling SCSS into CSS.
    Both of these techniques are similiar to how Bootstrap handles the
    <a
      href="https://github.com/twbs/bootstrap/blob/622c914a3acc1ab933b3e89d8abfdd63feeb4016/package.json#L25"
      >compilation</a
    >
    and
    <a
      href="https://github.com/twbs/bootstrap/blob/622c914a3acc1ab933b3e89d8abfdd63feeb4016/package.json#L29"
      >minification</a
    >
    of its SCSS files. Please make sure you have
    <a href="https://nodejs.org/en/">Node.js</a> and
    <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"
      >npm</a
    >
    installed first.
  </p>

  <div class="mb-5">
    <ins
      class="adsbygoogle"
      style="display:block; text-align:center;"
      data-ad-layout="in-article"
      data-ad-format="fluid"
      data-ad-client="ca-pub-6747903070938911"
      data-ad-slot="5663209858"
    ></ins>
    <script>
      (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
  </div>

  <h2>SCSS</h2>
  <p>
    First an SCSS file is needed, and it can be placed in root of the project
    folder. To illustrate the preprocessing of our SCSS file into CSS let's add
    some style rules that are intentionally utilizing the enhanced SCSS sytnax.
    We'll look to the
    <a href="https://sass-lang.com/guide">Sass Basics guide</a> for some code
    snippets.
  </p>

  <pre class="border rounded bg-light">
    <code>
    // some variables
    $font-stack:    Helvetica, sans-serif;
    $primary-color: #333;
    
    body {
      font: 100% $font-stack;
      color: $primary-color;
    }

    // some nesting
    nav {
        ul {
          margin: 0;
          padding: 0;
          list-style: none;
        }
      
        li { display: inline-block; }
      
        a {
          display: block;
          padding: 6px 12px;
          text-decoration: none;
        }
      }

      // a mixin
      @mixin transform($property) {
        -webkit-transform: $property;
        -ms-transform: $property;
        transform: $property;
      }
      .box { @include transform(rotate(30deg)); }
    </code>    
  </pre>

  <p>
    Now that we have an SCSS file to process, the next step involves configuring
    the package.json install the necessary dependencies and provide a way to
    compile SCSS with Node.js by adding custom scripts.
  </p>

  <h2>package.json</h2>

  <p>
    Using the scripts section of an
    <a href="https://docs.npmjs.com/files/package.json">npm package.json</a>
    file we can execute a series of commands to carry out the compilation of
    SCSS and optimize the resulting CSS output. A package.json file is required,
    and can be created running the command <kbd>npm init</kbd> in the project
    folder and following the prompts, or copying below.
  </p>

  <pre class="border rounded bg-light">
    <code>
    {
      "name": "npmcompilesass",
      "scripts": {}
    }              
    </code>
  </pre>

  <p>
    Next we'll need to add two packages into the devDependencies of out project.
    To do so run the following command
    <kbd>npm install node-sass clean-css-cli --save-dev</kbd>. What will occur
    is that the node-sass and clean-css npm packages will be installed to the
    devDependecies of the project. You should also see a node modules folder
    appear in the root of the project, and there should also be a
    <a href="https://docs.npmjs.com/files/package-lock.json"
      >package-lock.json</a
    >
    file that was created.
  </p>

  <p>Your package.json file should look like this:</p>

  <pre class="border rounded bg-light">
    <code>
    {
      "name": "npmcompilesass",
      "scripts": {},
      "devDependecies": {
        "clean-css-cli": "^4.3.0",
        "node-sass": "^4.12.0"
      }
    }              
    </code>
  </pre>

  <p>
    If for some reason your file looks different, you can copy the above and run
    the command
    <kbd>npm install</kbd>. This will reinstall both packages.
  </p>

  <h2>Compile Sass to CSS using node-sass</h2>
  <p>
    With the dependencies available we can add a script to compile the SCSS file
    created earlier with the node-sass npm package.
  </p>

  <pre class="border rounded bg-light">
    <code>
    {
      "name": "npmcompilesass",
      "scripts": {
        "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css"
      },
      "devDependecies": {
        "clean-css-cli": "^4.3.0",
        "node-sass": "^4.12.0"
      }
    }              
    </code>
  </pre>

  <p>
    Unfortunately,
    <a
      href="https://stackoverflow.com/questions/36258456/how-can-i-write-multiline-scripts-in-npm-scripts"
      >multi-line npm scripts are not supported</a
    >
    so the script is quite long, and there are quite a few parameters passed.
    Luckily the
    <a href="https://github.com/sass/node-sass#command-line-interface"
      >node-sass command line documentation</a
    >
    can provided detailed info on all of the possible parameters that are
    supported.
  </p>
  <p>
    In this case parameters are used to indicate source maps should be generated
    (for debugging purposes), the amount of decimal precision is capped at 6,
    and the scss source file to process is styles.scss, which will be processed
    and output to a file named styles.css in a new folder named dist, located in
    the root of the project. The name of the dist folder can be changed if
    needed, and it will be created when the script runs if it does not already
    exist.
  </p>

  <p>
    At this point we can run the compile styles by running the command
    <kbd>npm run compile-styles</kbd>. However, this is only running node-sass
    and isn't minifying the css output, so we need to add another script to
    carry out the css optimization.
  </p>

  <div class="mb-5">
    <ins
      class="adsbygoogle"
      style="display:block; text-align:center;"
      data-ad-layout="in-article"
      data-ad-format="fluid"
      data-ad-client="ca-pub-6747903070938911"
      data-ad-slot="5663209858"
    ></ins>
    <script>
      (adsbygoogle = window.adsbygoogle || []).push({});
    </script>
  </div>

  <h2>Minify CSS with clean-css</h2>

  <p>
    Like the node-sass package, we installed the clean-css package in the first
    step. To utilize it we'll add an additional script to the package.json file.
  </p>

  <pre class="border rounded bg-light">
    <code>
    {
      "name": "npmcompilesass",
      "scripts": {
        "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
        "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css"
      },
      "devDependecies": {
        "clean-css-cli": "^4.3.0",
        "node-sass": "^4.12.0"
      }
    }              
    </code>
  </pre>

  <p>
    Similiar to the <kbd>compile-styles</kbd>script, the
    <kbd>css-minify</kbd> script is also quite long with many parameters. More
    info on all the parameters can be found at the
    <a href="https://github.com/jakubpawlowicz/clean-css-cli#cli-options"
      >clean-css-cli GitHub repo</a
    >. The parameters being passed in here indicate to run clean-css with a
    certain level of optimization, line break formatting, and to include source
    maps with the optimized output. The file to optimize is the styles.css file
    located in the dist folder that was generated by the
    <kbd>compile-styles</kbd> command, and the optimized output will be written
    to <kbd>styles.min.css</kbd> in the same folder.
  </p>

  <p>
    Now that all the required scripts have been added to the package.json file
    we can first running the command <kbd>npm run compile-styles</kbd> followed
    by the command <kbd>npm run css-minify</kbd>. Then looking in the dist
    folder that was created there should be four files:
  </p>

  <ul>
    <li>styles.css</li>
    <li>styles.css.map</li>
    <li>styles.min.css</li>
    <li>styles.min.css.map</li>
  </ul>

  <p>
    The two files we are most interested in are styles.css and styles.min.css.
    These are the browser compatible style sheets that can now be linked in any
    HTML file.
  </p>

  <h2>CSS</h2>

  <p>
    To make sure everything worked correctly your styles.css file should look
    like this:
  </p>

  <pre class="border rounded bg-light">
    <code>
    body {
      font: 100% Helvetica, sans-serif;
      color: #333;
    }
    
    nav ul {
      margin: 0;
      padding: 0;
      list-style: none;
    }
    
    nav li {
      display: inline-block;
    }
    
    nav a {
      display: block;
      padding: 6px 12px;
      text-decoration: none;
    }
    
    .box {
      -webkit-transform: rotate(30deg);
      -ms-transform: rotate(30deg);
      transform: rotate(30deg);
    }
    
    /*# sourceMappingURL=styles.css.map */
    </code>    
  </pre>

  <p>
    You can also verify the styles.min.css file because it should have identical
    content with all of the whitespace removed. Also take note that a comment is
    included at the bottom for the source map file. This can be left as is and
    allows for seeing the style rules in the original SCSS file from the
    browser's dev tools.
  </p>

  <h2>run npm scripts sequentially</h2>
  <p>
    With the output being generated correctly, there is one additional step we
    can do to simplify the SCSS processing into one command. Looking back to the
    scripts section of the package.json file, let's add one more script to
    combine the other two.
  </p>

  <pre class="border rounded bg-light">
      <code>
      {
        "name": "npmcompilesass",
        "scripts": {
          "compile-styles": "node-sass --output-style expanded --source-map true --source-map-contents true --precision 6 styles.scss dist/styles.css",
          "css-minify": "cleancss --level 1 --format breaksWith=lf --source-map --source-map-inline-sources --output dist/styles.min.css dist/styles.css",
          "process-styles": "npm run compile-styles && npm run css-minify"
        },
        "devDependecies": {
          "clean-css-cli": "^4.3.0",
          "node-sass": "^4.12.0"
        }
      }              
      </code>
  </pre>

  <p>
    Now by running the command <kbd>npm run process-styles</kbd>, the
    compile-styles and css-minify scripts will run in series, and it is no
    longer necessary to execute both scripts seperately. The process-styles
    script is repsonsible for both compiling the SCSS into css output and
    minifying it for optimal use.
  </p>
</div>

<div class="text-left blog-post-text">
  <p>
    The
    <a href="https://www.npmjs.com/package/html-minifier">html-minifier</a> npm
    package provides a command line interface that makes it possible to minify
    HTML. This can be useful when working with a site built with the
    <a href="https://jamstack.org/">Jamstack</a>. One example of this scenario
    could be a site that uses a static site generator to ouput prerendered HTML
    files at build time. In this case, and especially when serving lots of
    content, minifying the HTML output can result in cost savings as well as
    performance improvements.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594592993659-0"}); -%>

  <p>
    Before following the steps below make sure to have
    <a href="https://nodejs.org/en/">Node.js</a> and
    <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"
      >npm</a
    >
    installed.
  </p>

  <h2>HTML</h2>

  <p>
    To demonstrate the features provided by the html-minifer package we'll start
    out with a sample html file. We can name this file index.html, and save it
    to a folder called <kbd>src</kbd>. The name of the file and containing
    folder will be needed in the following steps. For this example, the sample
    file contains different types of elements to highlight the effect of
    minification, especially in regard to how white space is maintained when
    using preformatted elements.
  </p>

  <pre class="border rounded bg-light"><code>
  &lt;!-- index.html --&gt;
  
  &lt;h1&gt;This is our sample html content&lt;/h1&gt;

  &lt;p&gt;Here is some paragraph text.&lt;p&gt;

  &lt;pre&gt;This text is preformatted.

  There is more than one line in this text block.

    &lt;code&gt;console.log("code block inside preformatted block.");&lt;/code&gt;
    &lt;/pre&gt;

  &lt;div&gt;some more text at the bottom&lt;/div&gt;
  </code></pre>

  <p>
    Note: A more common scenario than starting with a sample file might be
    applying the minification step to the output of a build process. If you are
    interested in seeing an example of how to generate HTML output, here is some
    info on how to <a href="/ejs-render-file">render EJS files with Node.js</a>.
    The steps in that article can be extended to create a static site generator,
    and the html-minifier package can be included and used as part of the build
    process.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594593287536-0"}); -%>

  <h2>package.json</h2>

  <p>
    Next we will want to set up the
    <a href="https://docs.npmjs.com/creating-a-package-json-file"
      >package.json</a
    >
    file so that we can npm install the html-minifier package. If one is not
    already created, running the command <kbd>npm init</kbd> and following the
    prompts will create one. Once the package.json file is in place we can run
    the command <kbd>npm install html-minifier --save-dev</kbd> to install the
    html-minifier npm package.
  </p>

  <p>Your package.json file should look similiar to this:</p>

  <pre class="border rounded bg-light"><code>
  {
    "name": "your-package-name-here",
    "version": "1.0.0",
    "devDependencies": {
      "html-minifier": "^4.0.0"
    }
  }    
  </code></pre>

  <p>
    There may be some additional properties created if using the npm init
    command, and the default values can be left in place. If you did not use the
    npm init command you can copy the contents above and run the command
    <kbd>npm install</kbd>, which will install all the required dependencies.
  </p>

  <p>
    Now that the html-minfier package is installed we need a way to utilize it
    from the command line. To do so, an npm scripts property can be added to the
    package.json file just created. We will need to add one script that will
    pass option arguments to the html-minifier package command line interface,
    and we can name this script <kbd>html-minify</kbd>.
  </p>
  <p>
    Here is what the package.json file should look like with the script added:
  </p>

  <pre class="border rounded bg-light"><code>
  {
    "name": "your-package-name-here",
    "version": "1.0.0",
    "scripts": {
      "html-minify": "html-minifier --input-dir src --output-dir dist --file-ext html --remove-comments --collapse-whitespace --minify-js true --minify-css true"
    },
    "devDependencies": {
      "html-minifier": "^4.0.0"
    }
  }    
  </code></pre>

  <p>
    Let's look at each of the options being passed in to the html-minifier cli,
    and see what each is specifying.
  </p>

  <h2>html-minifier options</h2>

  <p>
    The first option <kbd>--input-dir</kbd> is specifing the folder that our
    source html file is located. In this case the folder name is <kbd>src</kbd>,
    which was created during the intial step. Following that,
    <kbd>--output-dir</kbd> is specifying the output directory where the minfied
    html file will be added. In this case it is set to "dist", although this can
    be changed to any folder name.
  </p>
  <p>
    The <kbd>--file-ext</kbd> option is set to html (in this example it is not
    needed), however if the input directory contains file types other than
    "html", errors may occur as a result of the attempted minification of those
    files. In the html-minifier github repository there is open issue to
    <a href="https://github.com/kangax/html-minifier/pull/1026"
      >support multiple file extensions</a
    >. A possible workaround for the time being is to add multiple package.json
    scripts, with each one running a separate command for each of the individual
    file types that will be minfied. Additionally there are many other minifier
    pakages available on npm and one of those may be better suited for file
    types other than html.
  </p>

  <p>
    The next two options: <kbd>--remove-comments</kbd> and
    <kbd>--collapse-whitespace</kbd> do exactly as they are named, and there is
    no value to pass to them. If comments need to be retained or white space
    non-collapsed, these options can be deleted and html-minifier will not alter
    these properties of the original file.
  </p>

  <p>
    Depending on whether set to true or false (or not included as the default
    value is false), the last two options, <kbd>--minfiy-js</kbd> and
    <kbd>--minify-css</kbd> will minify the corresponding source of their type,
    only if included as inline <kbd>style</kbd> or <kbd>script</kbd> tags in the
    html being minified. It may also be good to know that the html-minifier
    options information states that
    <a href="https://www.npmjs.com/package/clean-css">clean-css</a> and
    <a href="https://www.npmjs.com/package/uglify-js">uglify-js</a> are used for
    the minification when these options are included.
  </p>

  <p>
    To get a full list of all the options supported, it can be helpful to
    globally install the html-minifier package by running the command
    <kbd>npm install html-minifier -g</kbd> (this may require administrator
    access). With the package installed globally, running the command
    <kbd>html-minifier --help</kbd> will list all of the command line options,
    their value if applicable, and a short help text description.
  </p>

  <h2>Minify HTML</h2>

  <p>
    Now that the html-minify script is added and the options are configured, to
    use it run the command <kbd>npm run html-minify</kbd>. As a result a new
    folder called "dist" should have been created where the src folder is
    located. Within that folder should be the minified version of the index.html
    file intially created.
  </p>

  <p>Here is what the minified html file should look like:</p>

  <pre class="border rounded bg-light"><code>
  &lt;h1&gt;This is our sample html content&lt;/h1&gt;&lt;p&gt;Here is some paragraph text.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;&lt;pre&gt;This text is preformatted.
    
    There is more than one line in this text block.
  
    &lt;code&gt;console.log("code block inside preformatted block.");&lt;/code&gt;
    &lt;/pre&gt;&lt;div&gt;some more text at the bottom&lt;/div&gt;  
  </code></pre>

  <p>
    Notice that the whitespace within the preformatted element is maintained.
    This is important as those sections need to keep their whitespace as
    originally formatted, so the html-minifier does not change the desired
    formatting. For other elements not intended to maintain whitespace they can
    be reduced to a single line, and the comment at the top has been removed as
    well. There is no inline Javascript of CSS in this example, but you can add
    some in and see the effect.
  </p>

  <p>
    Using the html-minifier package can be helpful to reduce file size and
    increase performace for users, especially when using a slower internet
    connection. Even with the small file used for this example, the response
    size has decreased from 303 bytes to 275 bytes. This is a small amount, but
    the savings can add up in a typical scenario where file sizes are much
    larger.
  </p>
  <p>
    There is also a
    <a href="http://kangax.github.io/html-minifier/">web based html minifier</a>
    made by the same package author.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594949816248-0"}); -%>
</div>

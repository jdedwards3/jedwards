<div class="text-left blog-post-text">
  <p>
    Did you know you can use npm's package.json to run commands? Here, we will
    learn how to run the TypeScript compiler to generate JavaScript output from
    TypeScript source files. Before we start, make sure you have
    <a href="https://nodejs.org/en/">Node.js</a> and
    <a href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm"
      >npm</a
    >
    installed.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594592993659-0"}); -%>

  <h2>TypeScript</h2>

  <p>
    In a new folder, create a file named script.ts. Then, add some sample code
    so we can test whether the JavaScript output is being generated properly.
  </p>

  <pre class="border rounded bg-light"><code>
  const msg: string = "Hello World!";
  console.log(msg);
  </code></pre>

  <h2>TypeScript Compiler</h2>

  <p>
    In the same folder, create a new file named tsconfig.json. Here is the
    TypeScript official documentation for configuring
    <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html">
      tsconfig.json</a
    >.
  </p>

  <p>Your tsconfig.json file should look like this:</p>

  <pre class="border rounded bg-light"><code>
  {
    "compilerOptions": {
    "outDir": "./output"
    },
    "inclue": ["/*"],
    "exclude": []
  }
  </code></pre>

  <p>
    This configuration tells the TypeScript compiler to look for source files in
    the root of your project, where your tsconfig.json is located. For any
    TypeScript files it finds there, it will output the compiled JavaScript to a
    new folder named <kbd>output</kbd>.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594593287536-0"}); -%>

  <h2>package.json</h2>

  <p>
    In the same folder create a package.json file. Here is the npm official
    documentation on creating a
    <a href="https://docs.npmjs.com/creating-a-package-json-file">
      package.json</a
    >
    file.
  </p>

  <p>
    Then, add the name and version properties required. You will also need to
    add a property called <kbd>scripts</kbd>. This property contains the script
    instructions that we will use to compile the TypeScript we created. In this
    case, our compilation script is named compile-typescript, and it runs the
    command tsc. This is the default TypeScript command, and it will utilize the
    tsconfig.json we created
  </p>

  <p>Your package.json file should look like this:</p>

  <pre class="border rounded bg-light"><code>
  {
    "name": "package-name-goes-here",
    "version": "0.0.0",
    "scripts": {
      "compile-typescript": "tsc"
    }
  }
  </code></pre>

  <p>
    Now that package.json is created and the TypeScript compilation step is
    listed, we must save TypeScript as a dev dependency. This will give the npm
    task access.
  </p>

  <h2>npm Install TypeScript</h2>

  <p>
    To install TypeScript for this project in a terminal window, run the
    command:
  </p>

  <pre class="border rounded bg-light"><code>
  npm install typescript --save-dev 
  </code></pre>

  <p>After installing TypeScript, your package.json should look like this:</p>

  <pre class="border rounded bg-light"><code>
  {
    "name": "package-name-goes-here",
    "version": "0.0.0",
    "scripts": {
      "compile-typescript": "tsc"
    },
    "devDependencies": {
      "typescript": "^3.5.3"
    }
  }   
  </code></pre>

  <h2>JavaScript</h2>

  <p>
    In a terminal window, navigate to the source code folder you created. Then,
    run the following command:
  </p>

  <pre class="border rounded bg-light"><code>
  npm run compile-typescript
  </code></pre>

  <p>
    Now, you should now see a new folder created named <kbd>output</kbd>, that
    contains one file named script.js. Notice how the output has defaulted to
    ES5 JavaScript, which is compatible with all major browsers.
  </p>

  <p>Your script.js file should look like this:</p>

  <pre class="border rounded bg-light"><code>
  var msg = "Hello World";
  console.log("msg");
  </code></pre>

  <p>
    Congratulations! You have successfully compiled TypeScript with npm.
  </p>

  <!-- ad unit-->
  <%- include('../partials/ad-unit', {id: "1594949816248-0"}); -%>
</div>
